package waterfallofintegration

import (
	"reflect"
	"testing"
)

func TestContoursShifting(t *testing.T) {
	tests := []struct {
		matrix [][]int
		x      [][]int
	}{
		// 1
		// 5x4; loop twice
		{
			[][]int{
				[]int{1, 2, 3, 4},
				[]int{5, 6, 7, 8},
				[]int{9, 10, 11, 12},
				[]int{13, 14, 15, 16},
				[]int{17, 18, 19, 20},
			},
			[][]int{
				[]int{5, 1, 2, 3},
				[]int{9, 7, 11, 4},
				[]int{13, 6, 15, 8},
				[]int{17, 10, 14, 12},
				[]int{18, 19, 20, 16},
			},
		},

		// 2
		// 1x8; loop once (or none, really)
		{
			[][]int{
				[]int{238, 239, 240, 241, 242, 243, 244, 245},
			},
			[][]int{
				[]int{245, 238, 239, 240, 241, 242, 243, 244},
			},
		},

		// 3
		// 8x1; loop once (or none)
		{
			[][]int{
				[]int{238},
				[]int{239},
				[]int{240},
				[]int{241},
				[]int{242},
				[]int{243},
				[]int{244},
				[]int{245},
			},
			[][]int{
				[]int{245},
				[]int{238},
				[]int{239},
				[]int{240},
				[]int{241},
				[]int{242},
				[]int{243},
				[]int{244},
			},
		},

		// 4
		// 4x3; loop twice
		{
			[][]int{
				[]int{1, 2, 3},
				[]int{4, 5, 6},
				[]int{7, 8, 9},
				[]int{10, 11, 12},
			},
			[][]int{
				[]int{4, 1, 2},
				[]int{7, 8, 3},
				[]int{10, 5, 6},
				[]int{11, 12, 9},
			},
		},

		// 5
		// 4x5; loop twice; divide both row and col by 2, loop until the smaller num
		/*
			 [[ 1, 2, 3, 4, 5],
				[ 6, 7, 8, 9,10],
				[11,12,13,14,15],
				[16,17,18,19,20]]
				===
			 [[ 6, 1, 2, 3, 4],
				[11, 8, 9,14, 5],
				[16, 7,12,13,10],
				[17,18,19,20,15]]
		*/
		{
			[][]int{
				[]int{1, 2, 3, 4, 5},
				[]int{6, 7, 8, 9, 10},
				[]int{11, 12, 13, 14, 15},
				[]int{16, 17, 18, 19, 20},
			},
			[][]int{
				[]int{6, 1, 2, 3, 4},
				[]int{11, 8, 9, 14, 5},
				[]int{16, 7, 12, 13, 10},
				[]int{17, 18, 19, 20, 15},
			},
		},

		// 6
		// 3x5; loop twice
		// numCol -= 2; numRows -= 2; loop until one of those is 0
		/*
			[
				[ 1,  2,  3,  4,  5],
				[ 6,  7,  8,  9, 10],
				[11, 12, 13, 14, 15]
			]
			===
			[
				[ 6,  1,  2,  3,  4],
				[11,  8,  9,  7,  5],
				[12, 13, 14, 15, 10]
			]
		*/
		{
			[][]int{
				[]int{1, 2, 3, 4, 5},
				[]int{6, 7, 8, 9, 10},
				[]int{11, 12, 13, 14, 15},
			},
			[][]int{
				[]int{6, 1, 2, 3, 4},
				[]int{11, 8, 9, 7, 5},
				[]int{12, 13, 14, 15, 10},
			},
		},

		// 7
		// 6x3; loop twice
		/*
			[ [ 1, 2, 3],
				[ 6, 7, 8],
				[11,12,13],
				[16,17,18],
				[21,22,23],
				[24,25,26]]
				===
			[ [ 6, 1, 2],
				[11,12, 3],
				[16,17, 8],
				[21,22,13],
				[24, 7,18],
				[25,26,23]]
		*/
		{
			[][]int{
				[]int{1, 2, 3},
				[]int{6, 7, 8},
				[]int{11, 12, 13},
				[]int{16, 17, 18},
				[]int{21, 22, 23},
				[]int{24, 25, 26},
			},
			[][]int{
				[]int{6, 1, 2},
				[]int{11, 12, 3},
				[]int{16, 17, 8},
				[]int{21, 22, 13},
				[]int{24, 7, 18},
				[]int{25, 26, 23},
			},
		},

		// 8
		{
			[][]int{[]int{239}},
			[][]int{[]int{239}},
		},
	}

	for i, test := range tests {
		actual := contoursShifting(test.matrix)

		if !reflect.DeepEqual(actual, test.x) {
			t.Errorf("%d - YOU SUCK SHIT", i+1)
		}
	}
}

/*
// 6x10; loop 3
[
	[ 1, 2, 3, 4, 5, 6, 7, 8, 9,10],
	[11,12,13,14,15,16,17,18,19,20],
	[21,22,23,24,25,26,27,28,29,30],
	[31,32,33,34,35,36,37,38,39,40],
	[41,42,43,44,45,46,47,48,49,50],
	[51,52,53,54,55,56,57,58,59,60],
]
*/
